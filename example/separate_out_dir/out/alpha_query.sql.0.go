// Code generated by pggen. DO NOT EDIT.

package out

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	AlphaNested(ctx context.Context) (string, error)
	// AlphaNestedBatch enqueues a AlphaNested query into batch to be executed
	// later by the batch.
	AlphaNestedBatch(batch *pgx.Batch)
	// AlphaNestedScan scans the result of an executed AlphaNestedBatch query.
	AlphaNestedScan(results pgx.BatchResults) (string, error)

	Alpha(ctx context.Context) (string, error)
	// AlphaBatch enqueues a Alpha query into batch to be executed
	// later by the batch.
	AlphaBatch(batch *pgx.Batch)
	// AlphaScan scans the result of an executed AlphaBatch query.
	AlphaScan(results pgx.BatchResults) (string, error)

	Bravo(ctx context.Context) (string, error)
	// BravoBatch enqueues a Bravo query into batch to be executed
	// later by the batch.
	BravoBatch(batch *pgx.Batch)
	// BravoScan scans the result of an executed BravoBatch query.
	BravoScan(results pgx.BatchResults) (string, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, alphaNestedSQL, alphaNestedSQL); err != nil {
		return fmt.Errorf("prepare query 'AlphaNested': %w", err)
	}
	if _, err := p.Prepare(ctx, alphaSQL, alphaSQL); err != nil {
		return fmt.Errorf("prepare query 'Alpha': %w", err)
	}
	if _, err := p.Prepare(ctx, bravoSQL, bravoSQL); err != nil {
		return fmt.Errorf("prepare query 'Bravo': %w", err)
	}
	return nil
}

const alphaNestedSQL = `SELECT 'alpha_nested' as output;`

// AlphaNested implements Querier.AlphaNested.
func (q *DBQuerier) AlphaNested(ctx context.Context) (string, error) {
	row := q.conn.QueryRow(ctx, alphaNestedSQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query AlphaNested: %w", err)
	}
	return item, nil
}

// AlphaNestedBatch implements Querier.AlphaNestedBatch.
func (q *DBQuerier) AlphaNestedBatch(batch *pgx.Batch) {
	batch.Queue(alphaNestedSQL)
}

// AlphaNestedScan implements Querier.AlphaNestedScan.
func (q *DBQuerier) AlphaNestedScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan AlphaNestedBatch row: %w", err)
	}
	return item, nil
}
