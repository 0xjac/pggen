// Code generated by pggen. DO NOT EDIT.

package order

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateTenant(ctx context.Context, key string, name string) (CreateTenantRow, error)
	// CreateTenantBatch enqueues a CreateTenant query into batch to be executed
	// later by the batch.
	CreateTenantBatch(batch *pgx.Batch, key string, name string)
	// CreateTenantScan scans the result of an executed CreateTenantBatch query.
	CreateTenantScan(results pgx.BatchResults) (CreateTenantRow, error)

	FindOrdersByCustomer(ctx context.Context, customerID int32) ([]FindOrdersByCustomerRow, error)
	// FindOrdersByCustomerBatch enqueues a FindOrdersByCustomer query into batch to be executed
	// later by the batch.
	FindOrdersByCustomerBatch(batch *pgx.Batch, customerID int32)
	// FindOrdersByCustomerScan scans the result of an executed FindOrdersByCustomerBatch query.
	FindOrdersByCustomerScan(results pgx.BatchResults) ([]FindOrdersByCustomerRow, error)

	FindProductsInOrder(ctx context.Context, orderID int32) ([]FindProductsInOrderRow, error)
	// FindProductsInOrderBatch enqueues a FindProductsInOrder query into batch to be executed
	// later by the batch.
	FindProductsInOrderBatch(batch *pgx.Batch, orderID int32)
	// FindProductsInOrderScan scans the result of an executed FindProductsInOrderBatch query.
	FindProductsInOrderScan(results pgx.BatchResults) ([]FindProductsInOrderRow, error)

	InsertCustomer(ctx context.Context, params InsertCustomerParams) (InsertCustomerRow, error)
	// InsertCustomerBatch enqueues a InsertCustomer query into batch to be executed
	// later by the batch.
	InsertCustomerBatch(batch *pgx.Batch, params InsertCustomerParams)
	// InsertCustomerScan scans the result of an executed InsertCustomerBatch query.
	InsertCustomerScan(results pgx.BatchResults) (InsertCustomerRow, error)

	InsertOrder(ctx context.Context, params InsertOrderParams) (InsertOrderRow, error)
	// InsertOrderBatch enqueues a InsertOrder query into batch to be executed
	// later by the batch.
	InsertOrderBatch(batch *pgx.Batch, params InsertOrderParams)
	// InsertOrderScan scans the result of an executed InsertOrderBatch query.
	InsertOrderScan(results pgx.BatchResults) (InsertOrderRow, error)

	FindOrdersByPrice(ctx context.Context, minTotal pgtype.Numeric) ([]FindOrdersByPriceRow, error)
	// FindOrdersByPriceBatch enqueues a FindOrdersByPrice query into batch to be executed
	// later by the batch.
	FindOrdersByPriceBatch(batch *pgx.Batch, minTotal pgtype.Numeric)
	// FindOrdersByPriceScan scans the result of an executed FindOrdersByPriceBatch query.
	FindOrdersByPriceScan(results pgx.BatchResults) ([]FindOrdersByPriceRow, error)

	FindOrdersMRR(ctx context.Context) ([]FindOrdersMRRRow, error)
	// FindOrdersMRRBatch enqueues a FindOrdersMRR query into batch to be executed
	// later by the batch.
	FindOrdersMRRBatch(batch *pgx.Batch)
	// FindOrdersMRRScan scans the result of an executed FindOrdersMRRBatch query.
	FindOrdersMRRScan(results pgx.BatchResults) ([]FindOrdersMRRRow, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

const createTenantSQL = `INSERT INTO tenant (tenant_id, name)
VALUES (base36_decode($1::text)::tenant_id, $2::text)
RETURNING *;`

type CreateTenantRow struct {
	TenantID int         `json:"tenant_id"`
	Rname    pgtype.Text `json:"rname"`
	Name     string      `json:"name"`
}

// CreateTenant implements Querier.CreateTenant.
func (q *DBQuerier) CreateTenant(ctx context.Context, key string, name string) (CreateTenantRow, error) {
	row := q.conn.QueryRow(ctx, createTenantSQL, key, name)
	var item CreateTenantRow
	if err := row.Scan(&item.TenantID, &item.Rname, &item.Name); err != nil {
		return item, fmt.Errorf("query CreateTenant: %w", err)
	}
	return item, nil
}

// CreateTenantBatch implements Querier.CreateTenantBatch.
func (q *DBQuerier) CreateTenantBatch(batch *pgx.Batch, key string, name string) {
	batch.Queue(createTenantSQL, key, name)
}

// CreateTenantScan implements Querier.CreateTenantScan.
func (q *DBQuerier) CreateTenantScan(results pgx.BatchResults) (CreateTenantRow, error) {
	row := results.QueryRow()
	var item CreateTenantRow
	if err := row.Scan(&item.TenantID, &item.Rname, &item.Name); err != nil {
		return item, fmt.Errorf("scan CreateTenantBatch row: %w", err)
	}
	return item, nil
}

const findOrdersByCustomerSQL = `SELECT *
FROM orders
WHERE customer_id = $1;`

type FindOrdersByCustomerRow struct {
	OrderID    int32              `json:"order_id"`
	OrderDate  pgtype.Timestamptz `json:"order_date"`
	OrderTotal pgtype.Numeric     `json:"order_total"`
	CustomerID pgtype.Int4        `json:"customer_id"`
}

// FindOrdersByCustomer implements Querier.FindOrdersByCustomer.
func (q *DBQuerier) FindOrdersByCustomer(ctx context.Context, customerID int32) ([]FindOrdersByCustomerRow, error) {
	rows, err := q.conn.Query(ctx, findOrdersByCustomerSQL, customerID)
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersByCustomer: %w", err)
	}
	defer rows.Close()
	items := []FindOrdersByCustomerRow{}
	for rows.Next() {
		var item FindOrdersByCustomerRow
		if err := rows.Scan(&item.OrderID, &item.OrderDate, &item.OrderTotal, &item.CustomerID); err != nil {
			return nil, fmt.Errorf("scan FindOrdersByCustomer row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindOrdersByCustomer rows: %w", err)
	}
	return items, err
}

// FindOrdersByCustomerBatch implements Querier.FindOrdersByCustomerBatch.
func (q *DBQuerier) FindOrdersByCustomerBatch(batch *pgx.Batch, customerID int32) {
	batch.Queue(findOrdersByCustomerSQL, customerID)
}

// FindOrdersByCustomerScan implements Querier.FindOrdersByCustomerScan.
func (q *DBQuerier) FindOrdersByCustomerScan(results pgx.BatchResults) ([]FindOrdersByCustomerRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersByCustomerBatch: %w", err)
	}
	defer rows.Close()
	items := []FindOrdersByCustomerRow{}
	for rows.Next() {
		var item FindOrdersByCustomerRow
		if err := rows.Scan(&item.OrderID, &item.OrderDate, &item.OrderTotal, &item.CustomerID); err != nil {
			return nil, fmt.Errorf("scan FindOrdersByCustomerBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindOrdersByCustomerBatch rows: %w", err)
	}
	return items, err
}

const findProductsInOrderSQL = `SELECT o.order_id, p.product_id, p.name
FROM orders o
  INNER JOIN order_product op USING (order_id)
  INNER JOIN product p USING (product_id)
WHERE o.order_id = $1;`

type FindProductsInOrderRow struct {
	OrderID   pgtype.Int4 `json:"order_id"`
	ProductID pgtype.Int4 `json:"product_id"`
	Name      pgtype.Text `json:"name"`
}

// FindProductsInOrder implements Querier.FindProductsInOrder.
func (q *DBQuerier) FindProductsInOrder(ctx context.Context, orderID int32) ([]FindProductsInOrderRow, error) {
	rows, err := q.conn.Query(ctx, findProductsInOrderSQL, orderID)
	if err != nil {
		return nil, fmt.Errorf("query FindProductsInOrder: %w", err)
	}
	defer rows.Close()
	items := []FindProductsInOrderRow{}
	for rows.Next() {
		var item FindProductsInOrderRow
		if err := rows.Scan(&item.OrderID, &item.ProductID, &item.Name); err != nil {
			return nil, fmt.Errorf("scan FindProductsInOrder row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindProductsInOrder rows: %w", err)
	}
	return items, err
}

// FindProductsInOrderBatch implements Querier.FindProductsInOrderBatch.
func (q *DBQuerier) FindProductsInOrderBatch(batch *pgx.Batch, orderID int32) {
	batch.Queue(findProductsInOrderSQL, orderID)
}

// FindProductsInOrderScan implements Querier.FindProductsInOrderScan.
func (q *DBQuerier) FindProductsInOrderScan(results pgx.BatchResults) ([]FindProductsInOrderRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindProductsInOrderBatch: %w", err)
	}
	defer rows.Close()
	items := []FindProductsInOrderRow{}
	for rows.Next() {
		var item FindProductsInOrderRow
		if err := rows.Scan(&item.OrderID, &item.ProductID, &item.Name); err != nil {
			return nil, fmt.Errorf("scan FindProductsInOrderBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindProductsInOrderBatch rows: %w", err)
	}
	return items, err
}

const insertCustomerSQL = `INSERT INTO customer (first_name, last_name, email)
VALUES ($1, $2, $3)
RETURNING *;`

type InsertCustomerParams struct {
	FirstName string
	LastName  string
	Email     string
}

type InsertCustomerRow struct {
	CustomerID int32  `json:"customer_id"`
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	Email      string `json:"email"`
}

// InsertCustomer implements Querier.InsertCustomer.
func (q *DBQuerier) InsertCustomer(ctx context.Context, params InsertCustomerParams) (InsertCustomerRow, error) {
	row := q.conn.QueryRow(ctx, insertCustomerSQL, params.FirstName, params.LastName, params.Email)
	var item InsertCustomerRow
	if err := row.Scan(&item.CustomerID, &item.FirstName, &item.LastName, &item.Email); err != nil {
		return item, fmt.Errorf("query InsertCustomer: %w", err)
	}
	return item, nil
}

// InsertCustomerBatch implements Querier.InsertCustomerBatch.
func (q *DBQuerier) InsertCustomerBatch(batch *pgx.Batch, params InsertCustomerParams) {
	batch.Queue(insertCustomerSQL, params.FirstName, params.LastName, params.Email)
}

// InsertCustomerScan implements Querier.InsertCustomerScan.
func (q *DBQuerier) InsertCustomerScan(results pgx.BatchResults) (InsertCustomerRow, error) {
	row := results.QueryRow()
	var item InsertCustomerRow
	if err := row.Scan(&item.CustomerID, &item.FirstName, &item.LastName, &item.Email); err != nil {
		return item, fmt.Errorf("scan InsertCustomerBatch row: %w", err)
	}
	return item, nil
}

const insertOrderSQL = `INSERT INTO orders (order_date, order_total, customer_id)
VALUES ($1, $2, $3)
RETURNING *;`

type InsertOrderParams struct {
	OrderDate  pgtype.Timestamptz
	OrderTotal pgtype.Numeric
	CustID     int32
}

type InsertOrderRow struct {
	OrderID    int32              `json:"order_id"`
	OrderDate  pgtype.Timestamptz `json:"order_date"`
	OrderTotal pgtype.Numeric     `json:"order_total"`
	CustomerID pgtype.Int4        `json:"customer_id"`
}

// InsertOrder implements Querier.InsertOrder.
func (q *DBQuerier) InsertOrder(ctx context.Context, params InsertOrderParams) (InsertOrderRow, error) {
	row := q.conn.QueryRow(ctx, insertOrderSQL, params.OrderDate, params.OrderTotal, params.CustID)
	var item InsertOrderRow
	if err := row.Scan(&item.OrderID, &item.OrderDate, &item.OrderTotal, &item.CustomerID); err != nil {
		return item, fmt.Errorf("query InsertOrder: %w", err)
	}
	return item, nil
}

// InsertOrderBatch implements Querier.InsertOrderBatch.
func (q *DBQuerier) InsertOrderBatch(batch *pgx.Batch, params InsertOrderParams) {
	batch.Queue(insertOrderSQL, params.OrderDate, params.OrderTotal, params.CustID)
}

// InsertOrderScan implements Querier.InsertOrderScan.
func (q *DBQuerier) InsertOrderScan(results pgx.BatchResults) (InsertOrderRow, error) {
	row := results.QueryRow()
	var item InsertOrderRow
	if err := row.Scan(&item.OrderID, &item.OrderDate, &item.OrderTotal, &item.CustomerID); err != nil {
		return item, fmt.Errorf("scan InsertOrderBatch row: %w", err)
	}
	return item, nil
}
