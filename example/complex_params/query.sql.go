// Code generated by pggen. DO NOT EDIT.

package complex_params

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	ParamNested1(ctx context.Context, dimensions Dimensions) (Dimensions, error)
	// ParamNested1Batch enqueues a ParamNested1 query into batch to be executed
	// later by the batch.
	ParamNested1Batch(batch *pgx.Batch, dimensions Dimensions)
	// ParamNested1Scan scans the result of an executed ParamNested1Batch query.
	ParamNested1Scan(results pgx.BatchResults) (Dimensions, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, paramNested1SQL, paramNested1SQL); err != nil {
		return fmt.Errorf("prepare query 'ParamNested1': %w", err)
	}
	return nil
}

// Dimensions represents the Postgres composite type "dimensions".
type Dimensions struct {
	Width  int `json:"width"`
	Height int `json:"height"`
}

// newDimensionsDecoder creates a new decoder for the Postgres 'dimensions' composite type.
func newDimensionsDecoder() pgtype.ValueTranscoder {
	return newCompositeType(
		"dimensions",
		[]string{"width", "height"},
		&pgtype.Int4{},
		&pgtype.Int4{},
	)
}

// encodeDimensions creates a new encoder for the Postgres 'dimensions' composite type query params.
func encodeDimensions(p Dimensions) textEncoder {
	dec := newDimensionsDecoder()
	dec.Set([]interface{}{
		p.Width,
		p.Height,
	})
	return textEncoder{ValueTranscoder: dec}
}

// ignoredOID means we don't know or care about the OID for a type. This is okay
// because pgx only uses the OID to encode values and lookup a decoder. We only
// use ignoredOID for decoding and we always specify a concrete decoder for scan
// methods.
const ignoredOID = 0

// textEncoder wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen must use the text format
// because the Postgres binary format requires the type OID but pggen doesn't
// necessarily know the OIDs of the types, hence ignoredOID.
type textEncoder struct {
	pgtype.ValueTranscoder
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textEncoder) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func newCompositeType(name string, fieldNames []string, vals ...pgtype.ValueTranscoder) *pgtype.CompositeType {
	fields := make([]pgtype.CompositeTypeField, len(fieldNames))
	for i, name := range fieldNames {
		fields[i] = pgtype.CompositeTypeField{Name: name, OID: ignoredOID}
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	rowType, _ := pgtype.NewCompositeTypeValues(name, fields, vals)
	return rowType
}

const paramNested1SQL = `SELECT $1::dimensions;`

// ParamNested1 implements Querier.ParamNested1.
func (q *DBQuerier) ParamNested1(ctx context.Context, dimensions Dimensions) (Dimensions, error) {
	row := q.conn.QueryRow(ctx, paramNested1SQL, encodeDimensions(dimensions))
	var item Dimensions
	dimensionsRow := newDimensionsDecoder()
	if err := row.Scan(dimensionsRow); err != nil {
		return item, fmt.Errorf("query ParamNested1: %w", err)
	}
	if err := dimensionsRow.AssignTo(&item); err != nil {
		return item, fmt.Errorf("assign ParamNested1 row: %w", err)
	}
	return item, nil
}

// ParamNested1Batch implements Querier.ParamNested1Batch.
func (q *DBQuerier) ParamNested1Batch(batch *pgx.Batch, dimensions Dimensions) {
	batch.Queue(paramNested1SQL, encodeDimensions(dimensions))
}

// ParamNested1Scan implements Querier.ParamNested1Scan.
func (q *DBQuerier) ParamNested1Scan(results pgx.BatchResults) (Dimensions, error) {
	row := results.QueryRow()
	var item Dimensions
	dimensionsRow := newDimensionsDecoder()
	if err := row.Scan(dimensionsRow); err != nil {
		return item, fmt.Errorf("scan ParamNested1Batch row: %w", err)
	}
	if err := dimensionsRow.AssignTo(&item); err != nil {
		return item, fmt.Errorf("assign ParamNested1 row: %w", err)
	}
	return item, nil
}
