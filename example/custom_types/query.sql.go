// Code generated by pggen. DO NOT EDIT.

package custom_types

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
	"github.com/jschaf/pggen/example/custom_types/mytype"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	FindText(ctx context.Context) (mytype.String, error)
	// FindTextBatch enqueues a FindText query into batch to be executed
	// later by the batch.
	FindTextBatch(batch *pgx.Batch)
	// FindTextScan scans the result of an executed FindTextBatch query.
	FindTextScan(results pgx.BatchResults) (mytype.String, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

const findTextSQL = `SELECT 'some_text';`

// FindText implements Querier.FindText.
func (q *DBQuerier) FindText(ctx context.Context) (mytype.String, error) {
	row := q.conn.QueryRow(ctx, findTextSQL)
	var item mytype.String
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query FindText: %w", err)
	}
	return item, nil
}

// FindTextBatch implements Querier.FindTextBatch.
func (q *DBQuerier) FindTextBatch(batch *pgx.Batch) {
	batch.Queue(findTextSQL)
}

// FindTextScan implements Querier.FindTextScan.
func (q *DBQuerier) FindTextScan(results pgx.BatchResults) (mytype.String, error) {
	row := results.QueryRow()
	var item mytype.String
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan FindTextBatch row: %w", err)
	}
	return item, nil
}
