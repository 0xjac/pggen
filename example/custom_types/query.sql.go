// Code generated by pggen. DO NOT EDIT.

package custom_types

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
	"github.com/jschaf/pggen/example/custom_types/mytype"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CustomTypes(ctx context.Context) (CustomTypesRow, error)
	// CustomTypesBatch enqueues a CustomTypes query into batch to be executed
	// later by the batch.
	CustomTypesBatch(batch *pgx.Batch)
	// CustomTypesScan scans the result of an executed CustomTypesBatch query.
	CustomTypesScan(results pgx.BatchResults) (CustomTypesRow, error)

	CustomMyInt(ctx context.Context) (int, error)
	// CustomMyIntBatch enqueues a CustomMyInt query into batch to be executed
	// later by the batch.
	CustomMyIntBatch(batch *pgx.Batch)
	// CustomMyIntScan scans the result of an executed CustomMyIntBatch query.
	CustomMyIntScan(results pgx.BatchResults) (int, error)

	IntArray(ctx context.Context) ([][]int32, error)
	// IntArrayBatch enqueues a IntArray query into batch to be executed
	// later by the batch.
	IntArrayBatch(batch *pgx.Batch)
	// IntArrayScan scans the result of an executed IntArrayBatch query.
	IntArrayScan(results pgx.BatchResults) ([][]int32, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

const customTypesSQL = `SELECT 'some_text', 1::bigint;`

type CustomTypesRow struct {
	Column mytype.String `json:"?column?"`
	Int8   CustomInt     `json:"int8"`
}

// CustomTypes implements Querier.CustomTypes.
func (q *DBQuerier) CustomTypes(ctx context.Context) (CustomTypesRow, error) {
	row := q.conn.QueryRow(ctx, customTypesSQL)
	var item CustomTypesRow
	if err := row.Scan(&item.Column, &item.Int8); err != nil {
		return item, fmt.Errorf("query CustomTypes: %w", err)
	}
	return item, nil
}

// CustomTypesBatch implements Querier.CustomTypesBatch.
func (q *DBQuerier) CustomTypesBatch(batch *pgx.Batch) {
	batch.Queue(customTypesSQL)
}

// CustomTypesScan implements Querier.CustomTypesScan.
func (q *DBQuerier) CustomTypesScan(results pgx.BatchResults) (CustomTypesRow, error) {
	row := results.QueryRow()
	var item CustomTypesRow
	if err := row.Scan(&item.Column, &item.Int8); err != nil {
		return item, fmt.Errorf("scan CustomTypesBatch row: %w", err)
	}
	return item, nil
}

const customMyIntSQL = `SELECT '5'::my_int as int5;`

// CustomMyInt implements Querier.CustomMyInt.
func (q *DBQuerier) CustomMyInt(ctx context.Context) (int, error) {
	row := q.conn.QueryRow(ctx, customMyIntSQL)
	var item int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query CustomMyInt: %w", err)
	}
	return item, nil
}

// CustomMyIntBatch implements Querier.CustomMyIntBatch.
func (q *DBQuerier) CustomMyIntBatch(batch *pgx.Batch) {
	batch.Queue(customMyIntSQL)
}

// CustomMyIntScan implements Querier.CustomMyIntScan.
func (q *DBQuerier) CustomMyIntScan(results pgx.BatchResults) (int, error) {
	row := results.QueryRow()
	var item int
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan CustomMyIntBatch row: %w", err)
	}
	return item, nil
}

const intArraySQL = `SELECT ARRAY ['5', '6', '7']::int[] as ints;`

// IntArray implements Querier.IntArray.
func (q *DBQuerier) IntArray(ctx context.Context) ([][]int32, error) {
	rows, err := q.conn.Query(ctx, intArraySQL)
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, fmt.Errorf("query IntArray: %w", err)
	}
	items := [][]int32{}
	for rows.Next() {
		var item []int32
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan IntArray row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close IntArray rows: %w", err)
	}
	return items, err
}

// IntArrayBatch implements Querier.IntArrayBatch.
func (q *DBQuerier) IntArrayBatch(batch *pgx.Batch) {
	batch.Queue(intArraySQL)
}

// IntArrayScan implements Querier.IntArrayScan.
func (q *DBQuerier) IntArrayScan(results pgx.BatchResults) ([][]int32, error) {
	rows, err := results.Query()
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, err
	}
	items := [][]int32{}
	for rows.Next() {
		var item []int32
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan IntArrayBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close IntArrayBatch rows: %w", err)
	}
	return items, err
}
