// Code generated by pggen. DO NOT EDIT.

package nested

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	VoidOnly(ctx context.Context) (pgconn.CommandTag, error)
	// VoidOnlyBatch enqueues a VoidOnly query into batch to be executed
	// later by the batch.
	VoidOnlyBatch(batch *pgx.Batch)
	// VoidOnlyScan scans the result of an executed VoidOnlyBatch query.
	VoidOnlyScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	VoidOnlyTwoParams(ctx context.Context, id int32) (pgconn.CommandTag, error)
	// VoidOnlyTwoParamsBatch enqueues a VoidOnlyTwoParams query into batch to be executed
	// later by the batch.
	VoidOnlyTwoParamsBatch(batch *pgx.Batch, id int32)
	// VoidOnlyTwoParamsScan scans the result of an executed VoidOnlyTwoParamsBatch query.
	VoidOnlyTwoParamsScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	VoidTwo(ctx context.Context) (string, error)
	// VoidTwoBatch enqueues a VoidTwo query into batch to be executed
	// later by the batch.
	VoidTwoBatch(batch *pgx.Batch)
	// VoidTwoScan scans the result of an executed VoidTwoBatch query.
	VoidTwoScan(results pgx.BatchResults) (string, error)

	VoidThree(ctx context.Context) (VoidThreeRow, error)
	// VoidThreeBatch enqueues a VoidThree query into batch to be executed
	// later by the batch.
	VoidThreeBatch(batch *pgx.Batch)
	// VoidThreeScan scans the result of an executed VoidThreeBatch query.
	VoidThreeScan(results pgx.BatchResults) (VoidThreeRow, error)

	VoidThree2(ctx context.Context) ([]string, error)
	// VoidThree2Batch enqueues a VoidThree2 query into batch to be executed
	// later by the batch.
	VoidThree2Batch(batch *pgx.Batch)
	// VoidThree2Scan scans the result of an executed VoidThree2Batch query.
	VoidThree2Scan(results pgx.BatchResults) ([]string, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

const voidOnlySQL = `SELECT void_fn();`

// VoidOnly implements Querier.VoidOnly.
func (q *DBQuerier) VoidOnly(ctx context.Context) (pgconn.CommandTag, error) {
	cmdTag, err := q.conn.Exec(ctx, voidOnlySQL)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query VoidOnly: %w", err)
	}
	return cmdTag, err
}

// VoidOnlyBatch implements Querier.VoidOnlyBatch.
func (q *DBQuerier) VoidOnlyBatch(batch *pgx.Batch) {
	batch.Queue(voidOnlySQL)
}

// VoidOnlyScan implements Querier.VoidOnlyScan.
func (q *DBQuerier) VoidOnlyScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec VoidOnlyBatch: %w", err)
	}
	return cmdTag, err
}

const voidOnlyTwoParamsSQL = `SELECT void_fn_two_params($1, 'text');`

// VoidOnlyTwoParams implements Querier.VoidOnlyTwoParams.
func (q *DBQuerier) VoidOnlyTwoParams(ctx context.Context, id int32) (pgconn.CommandTag, error) {
	cmdTag, err := q.conn.Exec(ctx, voidOnlyTwoParamsSQL, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query VoidOnlyTwoParams: %w", err)
	}
	return cmdTag, err
}

// VoidOnlyTwoParamsBatch implements Querier.VoidOnlyTwoParamsBatch.
func (q *DBQuerier) VoidOnlyTwoParamsBatch(batch *pgx.Batch, id int32) {
	batch.Queue(voidOnlyTwoParamsSQL, id)
}

// VoidOnlyTwoParamsScan implements Querier.VoidOnlyTwoParamsScan.
func (q *DBQuerier) VoidOnlyTwoParamsScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec VoidOnlyTwoParamsBatch: %w", err)
	}
	return cmdTag, err
}

const voidTwoSQL = `SELECT void_fn(), 'foo' as name;`

// VoidTwo implements Querier.VoidTwo.
func (q *DBQuerier) VoidTwo(ctx context.Context) (string, error) {
	row := q.conn.QueryRow(ctx, voidTwoSQL)
	var item string
	if err := row.Scan(nil, &item); err != nil {
		return item, fmt.Errorf("query VoidTwo: %w", err)
	}
	return item, nil
}

// VoidTwoBatch implements Querier.VoidTwoBatch.
func (q *DBQuerier) VoidTwoBatch(batch *pgx.Batch) {
	batch.Queue(voidTwoSQL)
}

// VoidTwoScan implements Querier.VoidTwoScan.
func (q *DBQuerier) VoidTwoScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(nil, &item); err != nil {
		return item, fmt.Errorf("scan VoidTwoBatch row: %w", err)
	}
	return item, nil
}

const voidThreeSQL = `SELECT void_fn(), 'foo' as foo, 'bar' as bar;`

type VoidThreeRow struct {
	Foo string `json:"foo"`
	Bar string `json:"bar"`
}

// VoidThree implements Querier.VoidThree.
func (q *DBQuerier) VoidThree(ctx context.Context) (VoidThreeRow, error) {
	row := q.conn.QueryRow(ctx, voidThreeSQL)
	var item VoidThreeRow
	if err := row.Scan(nil, &item.Foo, &item.Bar); err != nil {
		return item, fmt.Errorf("query VoidThree: %w", err)
	}
	return item, nil
}

// VoidThreeBatch implements Querier.VoidThreeBatch.
func (q *DBQuerier) VoidThreeBatch(batch *pgx.Batch) {
	batch.Queue(voidThreeSQL)
}

// VoidThreeScan implements Querier.VoidThreeScan.
func (q *DBQuerier) VoidThreeScan(results pgx.BatchResults) (VoidThreeRow, error) {
	row := results.QueryRow()
	var item VoidThreeRow
	if err := row.Scan(nil, &item.Foo, &item.Bar); err != nil {
		return item, fmt.Errorf("scan VoidThreeBatch row: %w", err)
	}
	return item, nil
}

const voidThree2SQL = `SELECT 'foo' as foo, void_fn(), void_fn();`

// VoidThree2 implements Querier.VoidThree2.
func (q *DBQuerier) VoidThree2(ctx context.Context) ([]string, error) {
	rows, err := q.conn.Query(ctx, voidThree2SQL)
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, fmt.Errorf("query VoidThree2: %w", err)
	}
	items := []string{}
	for rows.Next() {
		var item string
		if err := rows.Scan(&item, nil, nil); err != nil {
			return nil, fmt.Errorf("scan VoidThree2 row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, err
}

// VoidThree2Batch implements Querier.VoidThree2Batch.
func (q *DBQuerier) VoidThree2Batch(batch *pgx.Batch) {
	batch.Queue(voidThree2SQL)
}

// VoidThree2Scan implements Querier.VoidThree2Scan.
func (q *DBQuerier) VoidThree2Scan(results pgx.BatchResults) ([]string, error) {
	rows, err := results.Query()
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, err
	}
	items := []string{}
	for rows.Next() {
		var item string
		if err := rows.Scan(&item, nil, nil); err != nil {
			return nil, fmt.Errorf("scan VoidThree2Batch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, err
}
