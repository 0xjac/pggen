// Code generated by pggen. DO NOT EDIT.

package nested

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	ArrayNested2(ctx context.Context) ([]ProductImageType, error)
	// ArrayNested2Batch enqueues a ArrayNested2 query into batch to be executed
	// later by the batch.
	ArrayNested2Batch(batch *pgx.Batch)
	// ArrayNested2Scan scans the result of an executed ArrayNested2Batch query.
	ArrayNested2Scan(results pgx.BatchResults) ([]ProductImageType, error)

	Nested3(ctx context.Context) ([]ProductImageSetType, error)
	// Nested3Batch enqueues a Nested3 query into batch to be executed
	// later by the batch.
	Nested3Batch(batch *pgx.Batch)
	// Nested3Scan scans the result of an executed Nested3Batch query.
	Nested3Scan(results pgx.BatchResults) ([]ProductImageSetType, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, arrayNested2SQL, arrayNested2SQL); err != nil {
		return fmt.Errorf("prepare query 'ArrayNested2': %w", err)
	}
	if _, err := p.Prepare(ctx, nested3SQL, nested3SQL); err != nil {
		return fmt.Errorf("prepare query 'Nested3': %w", err)
	}
	return nil
}

// newProductImageTypeArrayDecoder creates a new decoder for the Postgres '_product_image_type' array type.
func newProductImageTypeArrayDecoder() pgtype.ValueTranscoder {
	return pgtype.NewArrayType("_product_image_type", ignoredOID, newProductImageTypeDecoder)
}

// Dimensions represents the Postgres composite type "dimensions".
type Dimensions struct {
	Width  int `json:"width"`
	Height int `json:"height"`
}

// ProductImageSetType represents the Postgres composite type "product_image_set_type".
type ProductImageSetType struct {
	Name      string             `json:"name"`
	OrigImage ProductImageType   `json:"orig_image"`
	Images    []ProductImageType `json:"images"`
}

// ProductImageType represents the Postgres composite type "product_image_type".
type ProductImageType struct {
	Source     string     `json:"source"`
	Dimensions Dimensions `json:"dimensions"`
}

// newDimensionsDecoder creates a new decoder for the Postgres 'dimensions' composite type.
func newDimensionsDecoder() pgtype.ValueTranscoder {
	return newCompositeType(
		"dimensions",
		[]string{"width", "height"},
		&pgtype.Int4{},
		&pgtype.Int4{},
	)
}

// newProductImageSetTypeDecoder creates a new decoder for the Postgres 'product_image_set_type' composite type.
func newProductImageSetTypeDecoder() pgtype.ValueTranscoder {
	return newCompositeType(
		"product_image_set_type",
		[]string{"name", "orig_image", "images"},
		&pgtype.Text{},
		newProductImageTypeDecoder(),
		newProductImageTypeArrayDecoder(),
	)
}

// newProductImageTypeDecoder creates a new decoder for the Postgres 'product_image_type' composite type.
func newProductImageTypeDecoder() pgtype.ValueTranscoder {
	return newCompositeType(
		"product_image_type",
		[]string{"source", "dimensions"},
		&pgtype.Text{},
		newDimensionsDecoder(),
	)
}

// ignoredOID means we don't know or care about the OID for a type. This is okay
// because pgx only uses the OID to encode values and lookup a decoder. We only
// use ignoredOID for decoding and we always specify a concrete decoder for scan
// methods.
const ignoredOID = 0

func newCompositeType(name string, fieldNames []string, vals ...pgtype.ValueTranscoder) *pgtype.CompositeType {
	fields := make([]pgtype.CompositeTypeField, len(fieldNames))
	for i, name := range fieldNames {
		fields[i] = pgtype.CompositeTypeField{Name: name, OID: ignoredOID}
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	rowType, _ := pgtype.NewCompositeTypeValues(name, fields, vals)
	return rowType
}

const arrayNested2SQL = `SELECT
  ARRAY [
    ROW ('img2', ROW (22, 22)::dimensions)::product_image_type,
    ROW ('img3', ROW (33, 33)::dimensions)::product_image_type
    ] AS images;`

// ArrayNested2 implements Querier.ArrayNested2.
func (q *DBQuerier) ArrayNested2(ctx context.Context) ([]ProductImageType, error) {
	row := q.conn.QueryRow(ctx, arrayNested2SQL)
	item := []ProductImageType{}
	imagesArray := newProductImageTypeArrayDecoder()
	if err := row.Scan(imagesArray); err != nil {
		return item, fmt.Errorf("query ArrayNested2: %w", err)
	}
	if err := imagesArray.AssignTo(&item); err != nil {
		return item, fmt.Errorf("assign ArrayNested2 row: %w", err)
	}
	return item, nil
}

// ArrayNested2Batch implements Querier.ArrayNested2Batch.
func (q *DBQuerier) ArrayNested2Batch(batch *pgx.Batch) {
	batch.Queue(arrayNested2SQL)
}

// ArrayNested2Scan implements Querier.ArrayNested2Scan.
func (q *DBQuerier) ArrayNested2Scan(results pgx.BatchResults) ([]ProductImageType, error) {
	row := results.QueryRow()
	item := []ProductImageType{}
	imagesArray := newProductImageTypeArrayDecoder()
	if err := row.Scan(imagesArray); err != nil {
		return item, fmt.Errorf("scan ArrayNested2Batch row: %w", err)
	}
	if err := imagesArray.AssignTo(&item); err != nil {
		return item, fmt.Errorf("assign ArrayNested2 row: %w", err)
	}
	return item, nil
}

const nested3SQL = `SELECT
  ROW (
    'name', -- name
    ROW ('img1', ROW (11, 11)::dimensions)::product_image_type, -- orig_image
    ARRAY [ --images
      ROW ('img2', ROW (22, 22)::dimensions)::product_image_type,
      ROW ('img3', ROW (33, 33)::dimensions)::product_image_type
      ]
    )::product_image_set_type;`

// Nested3 implements Querier.Nested3.
func (q *DBQuerier) Nested3(ctx context.Context) ([]ProductImageSetType, error) {
	rows, err := q.conn.Query(ctx, nested3SQL)
	if err != nil {
		return nil, fmt.Errorf("query Nested3: %w", err)
	}
	defer rows.Close()
	items := []ProductImageSetType{}
	rowRow := newProductImageSetTypeDecoder()
	for rows.Next() {
		var item ProductImageSetType
		if err := rows.Scan(rowRow); err != nil {
			return nil, fmt.Errorf("scan Nested3 row: %w", err)
		}
		if err := rowRow.AssignTo(&item); err != nil {
			return nil, fmt.Errorf("assign Nested3 row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close Nested3 rows: %w", err)
	}
	return items, err
}

// Nested3Batch implements Querier.Nested3Batch.
func (q *DBQuerier) Nested3Batch(batch *pgx.Batch) {
	batch.Queue(nested3SQL)
}

// Nested3Scan implements Querier.Nested3Scan.
func (q *DBQuerier) Nested3Scan(results pgx.BatchResults) ([]ProductImageSetType, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query Nested3Batch: %w", err)
	}
	defer rows.Close()
	items := []ProductImageSetType{}
	rowRow := newProductImageSetTypeDecoder()
	for rows.Next() {
		var item ProductImageSetType
		if err := rows.Scan(rowRow); err != nil {
			return nil, fmt.Errorf("scan Nested3Batch row: %w", err)
		}
		if err := rowRow.AssignTo(&item); err != nil {
			return nil, fmt.Errorf("assign Nested3 row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close Nested3Batch rows: %w", err)
	}
	return items, err
}
