// Code generated by pggen. DO NOT EDIT.

package go_pointer_types

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	GenSeries1(ctx context.Context) (*int, error)
	// GenSeries1Batch enqueues a GenSeries1 query into batch to be executed
	// later by the batch.
	GenSeries1Batch(batch *pgx.Batch)
	// GenSeries1Scan scans the result of an executed GenSeries1Batch query.
	GenSeries1Scan(results pgx.BatchResults) (*int, error)

	GenSeries(ctx context.Context) ([]*int, error)
	// GenSeriesBatch enqueues a GenSeries query into batch to be executed
	// later by the batch.
	GenSeriesBatch(batch *pgx.Batch)
	// GenSeriesScan scans the result of an executed GenSeriesBatch query.
	GenSeriesScan(results pgx.BatchResults) ([]*int, error)

	GenSeriesArr1(ctx context.Context) ([]int, error)
	// GenSeriesArr1Batch enqueues a GenSeriesArr1 query into batch to be executed
	// later by the batch.
	GenSeriesArr1Batch(batch *pgx.Batch)
	// GenSeriesArr1Scan scans the result of an executed GenSeriesArr1Batch query.
	GenSeriesArr1Scan(results pgx.BatchResults) ([]int, error)

	GenSeriesArr(ctx context.Context) ([][]int, error)
	// GenSeriesArrBatch enqueues a GenSeriesArr query into batch to be executed
	// later by the batch.
	GenSeriesArrBatch(batch *pgx.Batch)
	// GenSeriesArrScan scans the result of an executed GenSeriesArrBatch query.
	GenSeriesArrScan(results pgx.BatchResults) ([][]int, error)

	GenSeriesStr1(ctx context.Context) (*string, error)
	// GenSeriesStr1Batch enqueues a GenSeriesStr1 query into batch to be executed
	// later by the batch.
	GenSeriesStr1Batch(batch *pgx.Batch)
	// GenSeriesStr1Scan scans the result of an executed GenSeriesStr1Batch query.
	GenSeriesStr1Scan(results pgx.BatchResults) (*string, error)

	GenSeriesStr(ctx context.Context) ([]*string, error)
	// GenSeriesStrBatch enqueues a GenSeriesStr query into batch to be executed
	// later by the batch.
	GenSeriesStrBatch(batch *pgx.Batch)
	// GenSeriesStrScan scans the result of an executed GenSeriesStrBatch query.
	GenSeriesStrScan(results pgx.BatchResults) ([]*string, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// ignoredOID means we don't know or care about the OID for a type. This is okay
// because pgx only uses the OID to encode values and lookup a decoder. We only
// use ignoredOID for decoding and we always specify a concrete decoder for scan
// methods.
const ignoredOID = 0

const genSeries1SQL = `SELECT n
FROM generate_series(0, 2) n
LIMIT 1;`

// GenSeries1 implements Querier.GenSeries1.
func (q *DBQuerier) GenSeries1(ctx context.Context) (*int, error) {
	row := q.conn.QueryRow(ctx, genSeries1SQL)
	var item int
	if err := row.Scan(&item); err != nil {
		return &item, fmt.Errorf("query GenSeries1: %w", err)
	}
	return &item, nil
}

// GenSeries1Batch implements Querier.GenSeries1Batch.
func (q *DBQuerier) GenSeries1Batch(batch *pgx.Batch) {
	batch.Queue(genSeries1SQL)
}

// GenSeries1Scan implements Querier.GenSeries1Scan.
func (q *DBQuerier) GenSeries1Scan(results pgx.BatchResults) (*int, error) {
	row := results.QueryRow()
	var item int
	if err := row.Scan(&item); err != nil {
		return &item, fmt.Errorf("scan GenSeries1Batch row: %w", err)
	}
	return &item, nil
}

const genSeriesSQL = `SELECT n
FROM generate_series(0, 2) n;`

// GenSeries implements Querier.GenSeries.
func (q *DBQuerier) GenSeries(ctx context.Context) ([]*int, error) {
	rows, err := q.conn.Query(ctx, genSeriesSQL)
	if err != nil {
		return nil, fmt.Errorf("query GenSeries: %w", err)
	}
	defer rows.Close()
	items := []*int{}
	for rows.Next() {
		var item int
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GenSeries row: %w", err)
		}
		items = append(items, &item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GenSeries rows: %w", err)
	}
	return items, err
}

// GenSeriesBatch implements Querier.GenSeriesBatch.
func (q *DBQuerier) GenSeriesBatch(batch *pgx.Batch) {
	batch.Queue(genSeriesSQL)
}

// GenSeriesScan implements Querier.GenSeriesScan.
func (q *DBQuerier) GenSeriesScan(results pgx.BatchResults) ([]*int, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GenSeriesBatch: %w", err)
	}
	defer rows.Close()
	items := []*int{}
	for rows.Next() {
		var item int
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GenSeriesBatch row: %w", err)
		}
		items = append(items, &item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GenSeriesBatch rows: %w", err)
	}
	return items, err
}

const genSeriesArr1SQL = `SELECT array_agg(n)
FROM generate_series(0, 2) n;`

// GenSeriesArr1 implements Querier.GenSeriesArr1.
func (q *DBQuerier) GenSeriesArr1(ctx context.Context) ([]int, error) {
	row := q.conn.QueryRow(ctx, genSeriesArr1SQL)
	item := []int{}
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query GenSeriesArr1: %w", err)
	}
	return item, nil
}

// GenSeriesArr1Batch implements Querier.GenSeriesArr1Batch.
func (q *DBQuerier) GenSeriesArr1Batch(batch *pgx.Batch) {
	batch.Queue(genSeriesArr1SQL)
}

// GenSeriesArr1Scan implements Querier.GenSeriesArr1Scan.
func (q *DBQuerier) GenSeriesArr1Scan(results pgx.BatchResults) ([]int, error) {
	row := results.QueryRow()
	item := []int{}
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan GenSeriesArr1Batch row: %w", err)
	}
	return item, nil
}

const genSeriesArrSQL = `SELECT array_agg(n)
FROM generate_series(0, 2) n;`

// GenSeriesArr implements Querier.GenSeriesArr.
func (q *DBQuerier) GenSeriesArr(ctx context.Context) ([][]int, error) {
	rows, err := q.conn.Query(ctx, genSeriesArrSQL)
	if err != nil {
		return nil, fmt.Errorf("query GenSeriesArr: %w", err)
	}
	defer rows.Close()
	items := [][]int{}
	for rows.Next() {
		var item []int
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GenSeriesArr row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GenSeriesArr rows: %w", err)
	}
	return items, err
}

// GenSeriesArrBatch implements Querier.GenSeriesArrBatch.
func (q *DBQuerier) GenSeriesArrBatch(batch *pgx.Batch) {
	batch.Queue(genSeriesArrSQL)
}

// GenSeriesArrScan implements Querier.GenSeriesArrScan.
func (q *DBQuerier) GenSeriesArrScan(results pgx.BatchResults) ([][]int, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GenSeriesArrBatch: %w", err)
	}
	defer rows.Close()
	items := [][]int{}
	for rows.Next() {
		var item []int
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GenSeriesArrBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GenSeriesArrBatch rows: %w", err)
	}
	return items, err
}

const genSeriesStr1SQL = `SELECT n::text
FROM generate_series(0, 2) n
LIMIT 1;`

// GenSeriesStr1 implements Querier.GenSeriesStr1.
func (q *DBQuerier) GenSeriesStr1(ctx context.Context) (*string, error) {
	row := q.conn.QueryRow(ctx, genSeriesStr1SQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return &item, fmt.Errorf("query GenSeriesStr1: %w", err)
	}
	return &item, nil
}

// GenSeriesStr1Batch implements Querier.GenSeriesStr1Batch.
func (q *DBQuerier) GenSeriesStr1Batch(batch *pgx.Batch) {
	batch.Queue(genSeriesStr1SQL)
}

// GenSeriesStr1Scan implements Querier.GenSeriesStr1Scan.
func (q *DBQuerier) GenSeriesStr1Scan(results pgx.BatchResults) (*string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return &item, fmt.Errorf("scan GenSeriesStr1Batch row: %w", err)
	}
	return &item, nil
}

const genSeriesStrSQL = `SELECT n::text
FROM generate_series(0, 2) n;`

// GenSeriesStr implements Querier.GenSeriesStr.
func (q *DBQuerier) GenSeriesStr(ctx context.Context) ([]*string, error) {
	rows, err := q.conn.Query(ctx, genSeriesStrSQL)
	if err != nil {
		return nil, fmt.Errorf("query GenSeriesStr: %w", err)
	}
	defer rows.Close()
	items := []*string{}
	for rows.Next() {
		var item string
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GenSeriesStr row: %w", err)
		}
		items = append(items, &item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GenSeriesStr rows: %w", err)
	}
	return items, err
}

// GenSeriesStrBatch implements Querier.GenSeriesStrBatch.
func (q *DBQuerier) GenSeriesStrBatch(batch *pgx.Batch) {
	batch.Queue(genSeriesStrSQL)
}

// GenSeriesStrScan implements Querier.GenSeriesStrScan.
func (q *DBQuerier) GenSeriesStrScan(results pgx.BatchResults) ([]*string, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GenSeriesStrBatch: %w", err)
	}
	defer rows.Close()
	items := []*string{}
	for rows.Next() {
		var item string
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GenSeriesStrBatch row: %w", err)
		}
		items = append(items, &item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GenSeriesStrBatch rows: %w", err)
	}
	return items, err
}
