// Code generated by pggen. DO NOT EDIT.

package ltree

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	FindTopScienceChildren(ctx context.Context) ([]pgtype.Text, error)
	// FindTopScienceChildrenBatch enqueues a FindTopScienceChildren query into batch to be executed
	// later by the batch.
	FindTopScienceChildrenBatch(batch *pgx.Batch)
	// FindTopScienceChildrenScan scans the result of an executed FindTopScienceChildrenBatch query.
	FindTopScienceChildrenScan(results pgx.BatchResults) ([]pgtype.Text, error)

	FindTopScienceChildrenAgg(ctx context.Context) (pgtype.TextArray, error)
	// FindTopScienceChildrenAggBatch enqueues a FindTopScienceChildrenAgg query into batch to be executed
	// later by the batch.
	FindTopScienceChildrenAggBatch(batch *pgx.Batch)
	// FindTopScienceChildrenAggScan scans the result of an executed FindTopScienceChildrenAggBatch query.
	FindTopScienceChildrenAggScan(results pgx.BatchResults) (pgtype.TextArray, error)

	InsertSampleData(ctx context.Context) (pgconn.CommandTag, error)
	// InsertSampleDataBatch enqueues a InsertSampleData query into batch to be executed
	// later by the batch.
	InsertSampleDataBatch(batch *pgx.Batch)
	// InsertSampleDataScan scans the result of an executed InsertSampleDataBatch query.
	InsertSampleDataScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

const findTopScienceChildrenSQL = `SELECT path
FROM test
WHERE path <@ 'Top.Science';`

// FindTopScienceChildren implements Querier.FindTopScienceChildren.
func (q *DBQuerier) FindTopScienceChildren(ctx context.Context) ([]pgtype.Text, error) {
	rows, err := q.conn.Query(ctx, findTopScienceChildrenSQL)
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, fmt.Errorf("query FindTopScienceChildren: %w", err)
	}
	items := []pgtype.Text{}
	for rows.Next() {
		var item pgtype.Text
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan FindTopScienceChildren row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, err
}

// FindTopScienceChildrenBatch implements Querier.FindTopScienceChildrenBatch.
func (q *DBQuerier) FindTopScienceChildrenBatch(batch *pgx.Batch) {
	batch.Queue(findTopScienceChildrenSQL)
}

// FindTopScienceChildrenScan implements Querier.FindTopScienceChildrenScan.
func (q *DBQuerier) FindTopScienceChildrenScan(results pgx.BatchResults) ([]pgtype.Text, error) {
	rows, err := results.Query()
	if rows != nil {
		defer rows.Close()
	}
	if err != nil {
		return nil, err
	}
	items := []pgtype.Text{}
	for rows.Next() {
		var item pgtype.Text
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan FindTopScienceChildrenBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, err
}

const findTopScienceChildrenAggSQL = `SELECT array_agg(path)
FROM test
WHERE path <@ 'Top.Science';`

// FindTopScienceChildrenAgg implements Querier.FindTopScienceChildrenAgg.
func (q *DBQuerier) FindTopScienceChildrenAgg(ctx context.Context) (pgtype.TextArray, error) {
	row := q.conn.QueryRow(ctx, findTopScienceChildrenAggSQL)
	var item pgtype.TextArray
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query FindTopScienceChildrenAgg: %w", err)
	}
	return item, nil
}

// FindTopScienceChildrenAggBatch implements Querier.FindTopScienceChildrenAggBatch.
func (q *DBQuerier) FindTopScienceChildrenAggBatch(batch *pgx.Batch) {
	batch.Queue(findTopScienceChildrenAggSQL)
}

// FindTopScienceChildrenAggScan implements Querier.FindTopScienceChildrenAggScan.
func (q *DBQuerier) FindTopScienceChildrenAggScan(results pgx.BatchResults) (pgtype.TextArray, error) {
	row := results.QueryRow()
	var item pgtype.TextArray
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan FindTopScienceChildrenAggBatch row: %w", err)
	}
	return item, nil
}

const insertSampleDataSQL = `INSERT INTO test
VALUES ('Top'),
       ('Top.Science'),
       ('Top.Science.Astronomy'),
       ('Top.Science.Astronomy.Astrophysics'),
       ('Top.Science.Astronomy.Cosmology'),
       ('Top.Hobbies'),
       ('Top.Hobbies.Amateurs_Astronomy'),
       ('Top.Collections'),
       ('Top.Collections.Pictures'),
       ('Top.Collections.Pictures.Astronomy'),
       ('Top.Collections.Pictures.Astronomy.Stars'),
       ('Top.Collections.Pictures.Astronomy.Galaxies'),
       ('Top.Collections.Pictures.Astronomy.Astronauts');`

// InsertSampleData implements Querier.InsertSampleData.
func (q *DBQuerier) InsertSampleData(ctx context.Context) (pgconn.CommandTag, error) {
	cmdTag, err := q.conn.Exec(ctx, insertSampleDataSQL)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertSampleData: %w", err)
	}
	return cmdTag, err
}

// InsertSampleDataBatch implements Querier.InsertSampleDataBatch.
func (q *DBQuerier) InsertSampleDataBatch(batch *pgx.Batch) {
	batch.Queue(insertSampleDataSQL)
}

// InsertSampleDataScan implements Querier.InsertSampleDataScan.
func (q *DBQuerier) InsertSampleDataScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertSampleDataBatch: %w", err)
	}
	return cmdTag, err
}
