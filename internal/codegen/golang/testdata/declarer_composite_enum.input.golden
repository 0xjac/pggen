// SomeTableEnum represents the Postgres composite type "some_table_enum".
type SomeTableEnum struct {
	Foo DeviceType `json:"foo"`
}

// ignoredOID means we don't know or care about the OID for a type. This is okay
// because pgx only uses the OID to encode values and lookup a decoder. We only
// use ignoredOID for decoding and we always specify a concrete decoder for scan
// methods.
const ignoredOID = 0

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

// textEncoder wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen must use the text format
// because the Postgres binary format requires the type OID but pggen doesn't
// necessarily know the OIDs of the types, hence ignoredOID.
type textEncoder struct {
	pgtype.ValueTranscoder
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textEncoder) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

// newDeviceTypeEnum creates a new pgtype.ValueTranscoder for the
// Postgres enum type 'device_type'.
func newDeviceTypeEnum() pgtype.ValueTranscoder {
	return pgtype.NewEnumType(
		"device_type",
		[]string{
			string(DeviceTypeIOS),
			string(DeviceTypeMobile),
		},
	)
}

// DeviceType represents the Postgres enum "device_type".
type DeviceType string

const (
	DeviceTypeIOS    DeviceType = "ios"
	DeviceTypeMobile DeviceType = "mobile"
)

func (d DeviceType) String() string { return string(d) }

func newCompositeType(name string, fieldNames []string, vals ...pgtype.ValueTranscoder) *pgtype.CompositeType {
	fields := make([]pgtype.CompositeTypeField, len(fieldNames))
	for i, name := range fieldNames {
		fields[i] = pgtype.CompositeTypeField{Name: name, OID: ignoredOID}
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	rowType, _ := pgtype.NewCompositeTypeValues(name, fields, vals)
	return rowType
}

// newSomeTableEnum creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'some_table_enum'.
func newSomeTableEnum() pgtype.ValueTranscoder {
	return newCompositeType(
		"some_table_enum",
		[]string{"foo"},
		newDeviceTypeEnum(),
	)
}

// newSomeTableEnumInit creates an initialized pgtype.ValueTranscoder for the
// Postgres composite type 'some_table_enum' to encode query parameters.
func newSomeTableEnumInit(v SomeTableEnum) pgtype.ValueTranscoder {
	return textEncoder{setValue(newSomeTableEnum(), newSomeTableEnumRaw(v))}
}

// newSomeTableEnumRaw returns all composite fields for the Postgres composite
// type 'some_table_enum' as a slice of interface{} to encode query parameters.
func newSomeTableEnumRaw(v SomeTableEnum) []interface{} {
	return []interface{}{
		v.Foo,
	}
}