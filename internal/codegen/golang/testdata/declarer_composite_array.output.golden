// SomeTable represents the Postgres composite type "some_table".
type SomeTable struct {
	Foo    int16       `json:"foo"`
	BarBaz pgtype.Text `json:"bar_baz"`
}

// ignoredOID means we don't know or care about the OID for a type. This is okay
// because pgx only uses the OID to encode values and lookup a decoder. We only
// use ignoredOID for decoding and we always specify a concrete decoder for scan
// methods.
const ignoredOID = 0

func newCompositeType(name string, fieldNames []string, vals ...pgtype.ValueTranscoder) *pgtype.CompositeType {
	fields := make([]pgtype.CompositeTypeField, len(fieldNames))
	for i, name := range fieldNames {
		fields[i] = pgtype.CompositeTypeField{Name: name, OID: ignoredOID}
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	rowType, _ := pgtype.NewCompositeTypeValues(name, fields, vals)
	return rowType
}

// newSomeTableArray creates a new pgtype.ValueTranscoder for the Postgres
// '_some_array' array type.
func newSomeTableArray() pgtype.ValueTranscoder {
	return pgtype.NewArrayType("_some_array", ignoredOID, newSomeTable)
}

// newSomeTable creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'some_table'.
func newSomeTable() pgtype.ValueTranscoder {
	return newCompositeType(
		"some_table",
		[]string{"foo", "bar_baz"},
		&pgtype.Int2{},
		&pgtype.Text{},
	)
}