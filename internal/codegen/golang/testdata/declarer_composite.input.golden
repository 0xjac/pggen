// SomeTable represents the Postgres composite type "some_table".
type SomeTable struct {
	Foo    int16       `json:"foo"`
	BarBaz pgtype.Text `json:"bar_baz"`
}

// ignoredOID means we don't know or care about the OID for a type. This is okay
// because pgx only uses the OID to encode values and lookup a decoder. We only
// use ignoredOID for decoding and we always specify a concrete decoder for scan
// methods.
const ignoredOID = 0

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

// textEncoder wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen must use the text format
// because the Postgres binary format requires the type OID but pggen doesn't
// necessarily know the OIDs of the types, hence ignoredOID.
type textEncoder struct {
	pgtype.ValueTranscoder
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textEncoder) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func newCompositeType(name string, fieldNames []string, vals ...pgtype.ValueTranscoder) *pgtype.CompositeType {
	fields := make([]pgtype.CompositeTypeField, len(fieldNames))
	for i, name := range fieldNames {
		fields[i] = pgtype.CompositeTypeField{Name: name, OID: ignoredOID}
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	rowType, _ := pgtype.NewCompositeTypeValues(name, fields, vals)
	return rowType
}

// newSomeTable creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'some_table'.
func newSomeTable() pgtype.ValueTranscoder {
	return newCompositeType(
		"some_table",
		[]string{"foo", "bar_baz"},
		&pgtype.Int2{},
		&pgtype.Text{},
	)
}

// newSomeTableInit creates an initialized pgtype.ValueTranscoder for the
// Postgres composite type 'some_table' to encode query parameters.
func newSomeTableInit(v SomeTable) pgtype.ValueTranscoder {
	return textEncoder{setValue(newSomeTable(), newSomeTableRaw(v))}
}

// newSomeTableRaw returns all composite fields for the Postgres composite
// type 'some_table' as a slice of interface{} to encode query parameters.
func newSomeTableRaw(v SomeTable) []interface{} {
	return []interface{}{
		v.Foo,
		v.BarBaz,
	}
}